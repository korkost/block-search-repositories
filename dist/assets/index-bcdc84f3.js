(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))i(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function s(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerPolicy&&(r.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?r.credentials="include":t.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(t){if(t.ep)return;t.ep=!0;const r=s(t);fetch(t.href,r)}})();class l{constructor(){}counterMessage(e){return e%10===1&&e%100!==11?"Найден 1 репозиторий":e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?`Найдено ${e} репозитория`:e===0?"По вашему запросу пользователей не найдено":`Найдено ${e} репозиториев`}}const h=10,u="https://api.github.com/";class d{constructor(){}async loadRepos(e,s){return await fetch(`${u}search/repositories?q=${e}&per_page=${h}&page=${s}`)}async loadRepoData(e){return Promise.all(requests).then(s=>Promise.all(s.map(i=>i.json())))}}class m{constructor(e){this.api=e,this.app=document.getElementById("app"),this.mainContent=this.createElement("div","main"),this.reposListWrapper=this.createElement("div","repos-wrapper"),this.reposList=this.createElement("ul","repos"),this.reposListWrapper.append(this.reposList),this.searchLine=this.createElement("div","search-line"),this.searchInput=this.createElement("input","search-input"),this.searchInput.placeholder="Github Search repositories...",this.reposCounter=this.createElement("span","counter"),this.searchLine.append(this.searchInput),this.searchLine.append(this.reposCounter),this.loadMore=this.createElement("button","btn"),this.loadMore.textContent="Загрузить еще",this.loadMore.style.display="none",this.reposListWrapper.append(this.loadMore),this.app.append(this.searchLine),this.mainContent.append(this.reposListWrapper),this.app.append(this.mainContent)}createElement(e,s){const i=document.createElement(e);return s&&i.classList.add(s),i}createRepo(e){const s=this.createElement("li","repo-prev");s.addEventListener("click",()=>this.showRepo(e)),s.innerHTML=`<a class="repo-full-name" target="_blank "href="${e.html_url}">name:${e.full_name}</a>
                          <span class="repo-prev-name">id:${e.id}</span>
                          <span class="repo-prev-name">updated:${e.updated_at}</span>`,this.reposList.append(s)}clearRepos(){this.reposList.innerHTML=""}setRepoCounter(e){this.reposCounter.textContent=e}toggleStateLoadMoreButton(e){this.loadMore.style.display=e?"block":"none"}}class f{get currentPageNumber(){return this.currentPage}setCurrentPageValue(e){this.currentPage=e}constructor(e,s,i){this.log=e,this.api=s,this.view=i,this.view.searchInput.addEventListener("keyup",this.debounce(this.searchRepos.bind(this),500)),this.view.loadMore.addEventListener("click",this.loadMoreRepos.bind(this)),this.currentPage=1}searchRepos(){this.setCurrentPageValue(1),this.view.searchInput.value?this.api.loadRepos(this.view.searchInput.value,this.currentPageNumber).then(e=>this.updateRepos(e)):(this.view.clearRepos(),this.view.setRepoCounter(""))}loadMoreRepos(){this.setCurrentPageValue(this.currentPage+1),this.api.loadRepos(this.view.searchInput.value,this.currentPageNumber).then(e=>this.updateRepos(e,!0))}updateRepos(e,s=!1){let i,t;e.ok?(s||this.view.clearRepos(),e.json().then(r=>{r.items?(i=r.items,t=r.total_count,this.view.toggleStateLoadMoreButton(t>10&&i.length*this.currentPageNumber!==t),i.forEach(n=>this.view.createRepo(n))):this.view.clearRepos(),this.view.setRepoCounter(this.log.counterMessage(t))})):console.log("Error 1"+e.status)}debounce(e,s,i){let t;return function(){const r=this,n=arguments,c=function(){t=null,i||e.apply(r,n)},p=i&&!t;clearTimeout(t),t=setTimeout(c,s),p&&e.apply(r,n)}}}const a=new d;new f(new l,a,new m(a));
